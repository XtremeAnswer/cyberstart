#
# Connect over TCP to the following server 'localhost', 10000
# Initiate communication with GET to retrieve the encrypted messages.
# Then return the messages decrypted to the server,
# taking care to ensure each message is split on to a newline
#
from math import sqrt, pow
import socket
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('localhost', 10000))
client.send('GET')
letters = []
x = client.recv(2048)
#print(x)
secondvar = []
newvarthing = 0
x = x.splitlines()
#print(x)
y = 0
secondvar = []
for thing in x:
    y += 1
    if y > 1:
        secondvar.append(thing)
#print(secondvar)
#print(ord('A'))
#print(ord('Z'))

for i in range(26):
    letters.append(str(chr(65 + i)))

#for thing in letters:
#    print('%s : %s' % (thing, str(ord(thing))))
letters2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
thirdvar = []
fourthvar = []
fifthvar = []
k = 0
for thing in secondvar:
    k += 1
    for key in range(len(letters2)):
        translated = ''
        for symbol in thing:
            if symbol in letters2:
                num = letters2.find(symbol)
                num = num - key
                if num < 0:
                    num = num + len(letters2)
                translated = translated + letters2[num]
            else:
                translated = translated + symbol
        #print('KEY: %s' % (translated))
        if k == 1:
            thirdvar.append(translated)
        elif k == 2:
            fourthvar.append(translated)
        elif k == 3:
            fifthvar.append(translated)
"""
print(thirdvar)
print('')
print(fourthvar)
print('')
print(fifthvar)
"""
freqnums = [8.12, 1.49, 2.71, 4.32, 12.02, 2.30, 2.03, 5.92, 7.31, 0.10, 0.69, 3.98, 2.61, 6.95, 7.68, 1.82, 0.11, 6.02, 6.28, 9.10, 2.88, 1.11, 2.09, 0.17, 2.11, 0.07]  
k = 0
freq_counts = {}
for thing in letters:
    freq_counts[thing] = freqnums[k]
    k += 1
print(freq_counts)


def find_counts(combolist, possible_chr):
    instances = 0
    tot_chr = 0
    ret_list = []
    for sentence in combolist:
        ret_dict = {}
        for character in sentence:
            instances = 0
            tot_chr += 1
            temp = character
            if character in possible_chr:
                for thing in sentence:
                    if temp == thing:
                        instances += 1
                div = (instances / float(tot_chr))
                ret_dict[character] = div
            ret_list.append(ret_dict)
    return(ret_list)
"""
def find_counts(combolist, possible_chr):
    ret_list = []
    for sentence in combolist:
        ret_dict = {}
        for character in sentence:
            if character in possible_chr:
                ret_dict[character] = ret_dict.get(character, 0) + 1
        t = 0
        for thing in ret_dict:
            t += 1
        for key, value in ret_dict.items():
            ret_dict[key] = ret_dict[key] / t
        ret_list.append(ret_dict)
    return(ret_list)
"""
                
    
#print(thirdvar)
test = find_counts(thirdvar, list(letters2))
#for thing in test:
#    print(thing['Z'])
print(test)

def find_goodness(list_of_keys, english_freq):
    for possible_key in list_of_keys:
        s = 0
        for c in english_freq.keys():
            s += pow((c - possible_key.get(letter, 0)), 2)
    print(s)
test2 = find_goodness(test, freqnums)
print(test2)

            
        
