#
# Connect to the  server at 'localhost', 10000 send any data,
# the server will respond with the required word codes
# You will find a passage of text in the file backdoor.txt write a script
# which will use that text to build a message using the received word codes.
# Each word code is sent on a new line and contains
# paragraph_number, line_number, word_number
# Send the expected words back to the server to retrieve the flag.
# The server expects all the words in a single transmission.
# The words should have punctuation stripped from them.
# And the words should be separated by newline characters (\n)
#
import socket, string

#print(string.punctuation)

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('localhost', 10000))
client.send('hey this should work right?')
data = client.recv(2048)
print(data)
# data is corresponding paragraph, line, and word number
key_file = open('backdoor.txt', 'r').read()
#print(key_file)
#print(type(key_file))
paragraphs = key_file.split('\n\n')
#print(paragraphs)
print('')
lines = []
split_keys = []
for thing in paragraphs:
    #print(thing)
    None

for thing in paragraphs:
    thing = thing.splitlines()
    lines.append(thing)
    #print(thing)
        
#print(lines)
character_list = "abcdefghijklmnopqrstuvwxyz"
words = []
for paragraph in lines:
    split_keys.append(paragraph)
#print(split_keys)
# split_keys holds paragraphs, which in turn hold lines, which hold characters
split_key_dict = {}
line_wordlist = []
for i, paragraph in enumerate(split_keys):
    line_dict = {}
    split_key_dict[i+1] = line_dict
    for i2, line in enumerate(paragraph):
        line_wordlist = []
        word_dict = {}
        
        line = ''.join(line)
        #print('')
        #print(line)
        #print('')
        for i3, word in enumerate(line.split()):
            #print(word) 
            # this loop turns the characters into words without punctuation
            #tmp = list(word)
            #print(tmp)
            """
            for character in tmp:
                if character.lower() not in character_list:
                    tmp.remove(character)
                    #print(character)
                    #print('')
            """
            #tmp = ''.join(tmp)
            #print(tmp)
            #print('')
            word = ''.join(word).translate(None, string.punctuation)
            #print(word)
            line_wordlist.append(word.lower())
            for i4, thing in enumerate(line_wordlist):
                word_dict[i4+1] = thing
        #print(word_dict)
        #print('')
        line_dict[i2+1] = word_dict
       # print(line_dict)

            
            
                    
#print('')
#print(split_key_dict)
    

# code for changing characters in a line into words split by spaces ^
        
#print(words)

    

# 'words' holds all the words stripped of punctuation
# and all in lowercase
# split keys holds paragraphs, lines and characters
# the characters need to be replaced with words instead
# a dictionary could be used to give each pararaph/line/word a number
# making it easier to match the specific request
# split_key_dict holds each of the seperate dictionaries used for 
# assigned each paragraph/line/word a number, starting from 1

# the 'data' variable holds the required numbers 
# for paragraph, line in paragraph, and word in line
for para_num, paragraph in split_key_dict.items():
    for line_num, line in paragraph.items():
        for word_num, word in line.items():
            None
nums = []
number_list = '0123456789'
for line in data.splitlines():
    #print(line)
    line = ''.join(line)
        #print(line)
        #print('')
    for word in line.split():
        tmp = list(word)
        for character in tmp:
            if character not in number_list:
                tmp.remove(character)
            
        tmp = (''.join(tmp))
        nums.append(int(tmp))
        
#print(nums)
#print('')

data_list = []
tmp = []
for i, thing in enumerate(nums):
    thing = int(thing)
    tmp.append(thing)
    if i == 2:
        data_list.append(tmp)
        tmp = []
    elif i == 5:
        data_list.append(tmp)
        tmp = []
    elif i == 8:
        data_list.append(tmp)
        tmp = []
    elif i == 12:
        data_list.append(tmp)
        tmp = []
    elif i == 15:
        data_list.append(tmp)
        tmp = []
    elif i == 18:
        data_list.append(tmp)
        tmp = []


#print('')
#print(data_list)

# data list holds a list of the sets of 
# paragraph/line/word number required

print('')
#print(split_key_dict)

send_back_list = []
for triplet in data_list:
    print(split_key_dict[triplet[0]][triplet[1]][triplet[2]])
    send_back_list.append(split_key_dict[triplet[0]][triplet[1]][triplet[2]])
for i, thing in enumerate(send_back_list):
    if i < 1:
        send_back_str = thing
    elif i > 5:
        send_back_str = thing
    else:
        send_back_str = send_back_str + '\n' + thing
#print('')
#print(send_back_str)
client.send(send_back_str)
new_data = client.recv(2048)
print(new_data)


